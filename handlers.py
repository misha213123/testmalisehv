from aiogram import Router, types, F, Bot
from aiogram.filters.command import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from keyboards import MODULES, modules_keyboard, module_options_keyboard
from config import ADMIN_ID

router = Router()

class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–¢—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —Å–≤–æ–µ–≥–æ –ø—É—Ç–∏ –≤ –ê–≤–∏—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞—Ö üöÄ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ—à–∞–≥–æ–≤—ã–µ —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –∏ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.\n"
        "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        reply_markup=modules_keyboard()
    )

@router.message(lambda message: message.text in MODULES)
async def show_module_info(message: types.Message, state: FSMContext):
    module_name = message.text
    desc = MODULES[module_name]

    data = await state.get_data()
    done_modules = data.get("done_modules", [])
    done = module_name in done_modules

    await state.update_data(current_module=module_name)
    keyboard = module_options_keyboard(done)

    status_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if done else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
    await message.answer(
        f"<b>{module_name}</b>\n\n{desc}\n\n–°—Ç–∞—Ç—É—Å: {status_text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
async def mark_done_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    module_name = data.get("current_module")
    if not module_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    done_modules = data.get("done_modules", [])
    if module_name not in done_modules:
        done_modules.append(module_name)
        await state.update_data(done_modules=done_modules)

    await message.answer(
        f"–ú–æ–¥—É–ª—å <b>{module_name}</b> –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π ‚úÖ",
        reply_markup=modules_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_module=None)

@router.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu_handler(message: types.Message, state: FSMContext):
    await state.update_data(current_module=None)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=modules_keyboard()
    )

@router.message(F.text == "üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def ask_name(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è.", reply_markup=ReplyKeyboardRemove())

@router.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.waiting_for_phone)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(Form.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext, bot: Bot):
    phone = message.text.strip()
    clean_phone = phone[1:] if phone.startswith("+") else phone

    if not clean_phone.isdigit():
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Å –ø–ª—é—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()
    name = data.get("name")
    username = message.from_user.username or "–Ω–µ—Ç –Ω–∏–∫–∞"

    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nTelegram: @{username}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
    )

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {name}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—é –∑–∞—è–≤–∫—É —Å –Ω–æ–º–µ—Ä–æ–º: {phone}.\n"
        "–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.",
        reply_markup=modules_keyboard()
    )
    await state.clear()

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer(
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é @first025 –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫—É—Ä—Å–∞ Aviclub."
    )

@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def info_command(message: types.Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å–≤–æ–∏—Ç—å –ê–≤–∏—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ —à–∞–≥–∞–º.\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —É—Ä–æ–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º.\n"
        "–ü—Ä–æ—Ö–æ–¥–∏ –º–æ–¥—É–ª–∏, –æ—Ç–º–µ—á–∞–π —É—Å–ø–µ—Ö–∏ –∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!"
    )

@router.message(Command(commands=["help"]))
async def help_cmd(message: types.Message):
    await help_command(message)

@router.message(Command(commands=["info"]))
async def info_cmd(message: types.Message):
    await info_command(message)

@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá", reply_markup=modules_keyboard())
